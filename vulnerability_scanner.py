import socket
import requests
from scapy.all import sr1, IP, TCP

# Function to scan for open ports
def port_scan(target):
    open_ports = []
    for port in range(1, 1025):
        pkt = IP(dst=target)/TCP(dport=port, flags='S')
        resp = sr1(pkt, timeout=1, verbose=0)
        if resp is not None and resp.haslayer(TCP) and resp.getlayer(TCP).flags == 0x12:
            open_ports.append(port)
            sr1(IP(dst=target)/TCP(dport=port, flags='R'), timeout=1, verbose=0)
    return open_ports

# Function to identify service and version (simple version)
def identify_service(target, port):
    try:
        s = socket.socket()
        s.connect((target, port))
        s.send(b'HEAD / HTTP/1.1\r\n\r\n')
        banner = s.recv(1024)
        s.close()
        return banner.decode().strip()
    except:
        return None

# Function to check vulnerability database
def check_vulnerabilities(service, version):
    api_url = f"https://services.nvd.nist.gov/rest/json/cves/1.0?keyword={service} {version}"
    response = requests.get(api_url)
    if response.status_code == 200:
        data = response.json()
        if 'result' in data and 'CVE_Items' in data['result']:
            return data['result']['CVE_Items']
    return []

# Function to generate report
def generate_report(target, open_ports, vulnerabilities):
    report = f"Vulnerability Report for {target}\n"
    report += "=" * 50 + "\n"
    report += f"Open Ports:\n"
    for port in open_ports:
        report += f" - Port {port}\n"
    report += "\nIdentified Vulnerabilities:\n"
    for vuln in vulnerabilities:
        report += f" - {vuln['cve']['CVE_data_meta']['ID']}: {vuln['cve']['description']['description_data'][0]['value']}\n"
    return report

def main():
    target = '192.168.1.1'  # Change this to your target
    open_ports = port_scan(target)
    vulnerabilities = []
    for port in open_ports:
        service_banner = identify_service(target, port)
        if service_banner:
            # Extract service and version from banner (simplified)
            service_info = service_banner.split('/')
            if len(service_info) > 1:
                service = service_info[0].strip()
                version = service_info[1].strip()
                vulns = check_vulnerabilities(service, version)
                vulnerabilities.extend(vulns)
    report = generate_report(target, open_ports, vulnerabilities)
    print(report)

if __name__ == "__main__":
    main()
